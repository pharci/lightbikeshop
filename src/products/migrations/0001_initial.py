# Generated by Django 5.2.5 on 2025-09-07 15:57

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=140, unique=True)),
                ('value_type', models.CharField(choices=[('text', 'Текст'), ('number', 'Число'), ('bool', 'Да/Нет')], default='text', max_length=12)),
                ('unit', models.CharField(blank=True, max_length=32)),
            ],
            options={
                'verbose_name': 'Атрибут',
                'verbose_name_plural': 'Атрибуты',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='Название в ссылке')),
                ('title', models.CharField(max_length=100)),
                ('image', models.ImageField(upload_to='brends/')),
            ],
            options={
                'verbose_name': 'Бренд',
                'verbose_name_plural': 'Бренды',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Название')),
                ('second_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Для склейки')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='Ссылка')),
                ('image', models.ImageField(upload_to='categories/')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('base_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('weight', models.PositiveIntegerField(blank=True, null=True, verbose_name='Вес для доставки, г')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='products.brand')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='products.category')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
            },
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Цена')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Старая цена')),
                ('slug', models.SlugField(editable=False, max_length=200, unique=True, verbose_name='Ссылка')),
                ('wb_article', models.CharField(blank=True, max_length=64, null=True, verbose_name='Артикул вб')),
                ('ozon_article', models.CharField(blank=True, max_length=64, null=True, verbose_name='Артикул озон')),
                ('inventory', models.PositiveIntegerField(default=0, verbose_name='В наличии:')),
                ('new', models.BooleanField(default=True, verbose_name='Бейджик NEW')),
                ('rec', models.BooleanField(default=False, verbose_name='Показывать на главной')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Активный')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product')),
            ],
            options={
                'verbose_name': 'Вариант',
                'verbose_name_plural': 'Варианты',
            },
        ),
        migrations.CreateModel(
            name='RelatedVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('manual', 'Manual'), ('auto', 'Auto')], default='manual', max_length=10)),
                ('weight', models.FloatField(default=1.0)),
                ('position', models.PositiveIntegerField(default=0)),
                ('pinned', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_links', to='products.variant')),
                ('to_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='products.variant')),
            ],
            options={
                'verbose_name_plural': 'Связанные товары',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='gallery/', verbose_name='Изображение')),
                ('alt', models.CharField(blank=True, max_length=200, verbose_name='Alt-текст')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.variant')),
            ],
            options={
                'verbose_name': 'Галерея',
                'verbose_name_plural': 'Галерея',
                'ordering': ['sort', 'id'],
            },
        ),
        migrations.CreateModel(
            name='CopurchaseVariantStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=0)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('variant_max', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='products.variant')),
                ('variant_min', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='products.variant')),
            ],
            options={
                'verbose_name_plural': 'Статистика вариантов по заказам',
            },
        ),
        migrations.CreateModel(
            name='AttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_text', models.CharField(blank=True, max_length=255)),
                ('value_number', models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True)),
                ('value_bool', models.BooleanField(blank=True, null=True)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.attribute')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_values', to='products.variant')),
            ],
            options={
                'verbose_name': 'Значение атрибута',
                'verbose_name_plural': 'Значения атрибутов',
            },
        ),
        migrations.CreateModel(
            name='CategoryAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_required', models.BooleanField(default=False)),
                ('is_filterable', models.BooleanField(default=True)),
                ('is_variant', models.BooleanField(default=False)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='category_usages', to='products.attribute')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_attributes', to='products.category')),
            ],
            options={
                'verbose_name': 'Атрибут категории',
                'verbose_name_plural': 'Атрибуты категорий',
                'ordering': ['sort_order', 'id'],
                'unique_together': {('category', 'attribute')},
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'brand', 'base_name'], name='products_pr_categor_7f5542_idx'),
        ),
        migrations.AddIndex(
            model_name='variant',
            index=models.Index(fields=['id'], name='products_va_id_e2ed55_idx'),
        ),
        migrations.AddIndex(
            model_name='relatedvariant',
            index=models.Index(fields=['from_variant', '-pinned', '-weight', 'position', 'id'], name='products_re_from_va_a99058_idx'),
        ),
        migrations.AddIndex(
            model_name='relatedvariant',
            index=models.Index(fields=['source', 'from_variant'], name='products_re_source_7ca4bd_idx'),
        ),
        migrations.AddConstraint(
            model_name='relatedvariant',
            constraint=models.UniqueConstraint(fields=('from_variant', 'to_variant'), name='uniq_related_variant'),
        ),
        migrations.AddConstraint(
            model_name='relatedvariant',
            constraint=models.CheckConstraint(condition=models.Q(('from_variant', models.F('to_variant')), _negated=True), name='no_self_link_variant'),
        ),
        migrations.AddIndex(
            model_name='image',
            index=models.Index(fields=['variant', 'sort'], name='products_im_variant_e11ece_idx'),
        ),
        migrations.AddIndex(
            model_name='copurchasevariantstat',
            index=models.Index(fields=['variant_min'], name='products_co_variant_9bc55d_idx'),
        ),
        migrations.AddIndex(
            model_name='copurchasevariantstat',
            index=models.Index(fields=['variant_max'], name='products_co_variant_154731_idx'),
        ),
        migrations.AddConstraint(
            model_name='copurchasevariantstat',
            constraint=models.UniqueConstraint(fields=('variant_min', 'variant_max'), name='uniq_copurchase_variant'),
        ),
        migrations.AddConstraint(
            model_name='copurchasevariantstat',
            constraint=models.CheckConstraint(condition=models.Q(('variant_min__lt', models.F('variant_max'))), name='ordered_pair_variant'),
        ),
        migrations.AlterUniqueTogether(
            name='attributevalue',
            unique_together={('variant', 'attribute')},
        ),
    ]
